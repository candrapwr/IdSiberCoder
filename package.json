{
  "name": "idsibercoder",
  "displayName": "IdSiberCoder",
  "description": "VS Code extension that mirrors the IdSiber AI Codex experience with DeepSeek integration, context optimization, and workspace-aware tooling.",
  "version": "0.4.6",
  "publisher": "DatasiberLab",
  "engines": {
    "vscode": "^1.85.0"
  },
  "homepage": "https://github.com/candrapwr/IdSiberCoder",
  "repository": {
    "type": "git",
    "url": "https://github.com/candrapwr/IdSiberCoder.git"
  },
  "bugs": {
    "url": "https://github.com/candrapwr/IdSiberCoder/issues"
  },
  "categories": [
    "Programming Languages",
    "Snippets",
    "AI"
  ],
  "icon": "media/icon.png",
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "keywords": [
    "ai",
    "deepseek",
    "codex",
    "programming",
    "assistant",
    "chat"
  ],
  "preview": false,
  "main": "./out/extension.js",
  "activationEvents": [
    
  ],
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "idSiberCoder",
          "title": "IdSiberCoder",
          "icon": "$(comment-discussion)"
        }
      ]
    },
    "views": {
      "idSiberCoder": [
        {
          "id": "idSiberCoder-sidebar",
          "name": "Chat",
          "type": "webview",
          "icon": "$(comment-discussion)"
        }
      ]
    },
    "commands": [
      {
        "command": "idSiberCoder.openSidebar",
        "title": "IdSiberCoder: Open Assistant",
        "category": "IdSiberCoder"
      },
      {
        "command": "idSiberCoder.openPanel",
        "title": "IdSiberCoder: Open Assistant (Panel)",
        "category": "IdSiberCoder"
      },
      {
        "command": "idSiberCoder.sendPrompt",
        "title": "IdSiberCoder: Send Prompt",
        "category": "IdSiberCoder"
      }
    ],
    "configuration": {
      "title": "IdSiberCoder",
      "properties": {
        "idSiberCoder.provider": {
          "type": "string",
          "description": "Default chat provider.",
          "default": "deepseek",
          "enum": ["deepseek", "openai", "zhipuai", "grok", "claude", "novita"]
        },
        "idSiberCoder.deepseek.baseUrl": {
          "type": "string",
          "description": "DeepSeek API base URL.",
          "default": "https://api.deepseek.com"
        },
        "idSiberCoder.deepseek.model": {
          "type": "string",
          "description": "DeepSeek model identifier.",
          "default": "deepseek-chat"
        },
        "idSiberCoder.openai.baseUrl": {
          "type": "string",
          "description": "OpenAI API base URL.",
          "default": "https://api.openai.com/v1"
        },
        "idSiberCoder.openai.model": {
          "type": "string",
          "description": "OpenAI model identifier.",
          "default": "gpt-4o-mini"
        },
        "idSiberCoder.enableContextOptimization": {
          "type": "boolean",
          "description": "Enable Codex-style context deduplication and summaries.",
          "default": true
        },
        "idSiberCoder.contextSummaryThreshold": {
          "type": "number",
          "description": "Number of turns before summarization begins.",
          "default": 35
        },
        "idSiberCoder.contextSummaryRetention": {
          "type": "number",
          "description": "Number of latest turns kept verbatim when summarizing.",
          "default": 30
        },
        "idSiberCoder.maxIterations": {
          "type": "number",
          "description": "Maximum chained tool calls per request.",
          "default": 12
        },
        "idSiberCoder.deepseek.maxTokens": {
          "type": "number",
          "description": "Maximum tokens for DeepSeek responses.",
          "default": 7900
        },
        "idSiberCoder.openai.maxTokens": {
          "type": "number",
          "description": "Maximum tokens for OpenAI responses.",
          "default": 20000
        },
        "idSiberCoder.zhipuai.baseUrl": {
          "type": "string",
          "description": "ZhiPu AI API base URL.",
          "default": "https://open.bigmodel.cn/api/paas/v4"
        },
        "idSiberCoder.zhipuai.model": {
          "type": "string",
          "description": "ZhiPu AI model identifier.",
          "default": "glm-4.5-flash"
        },
        "idSiberCoder.zhipuai.maxTokens": {
          "type": "number",
          "description": "Maximum tokens for ZhiPu AI responses.",
          "default": 8000
        },
        "idSiberCoder.grok.baseUrl": {
          "type": "string",
          "description": "Grok API base URL.",
          "default": "https://api.x.ai/v1"
        },
        "idSiberCoder.grok.model": {
          "type": "string",
          "description": "Grok model identifier.",
          "default": "grok-3-mini"
        },
        "idSiberCoder.grok.maxTokens": {
          "type": "number",
          "description": "Maximum tokens for Grok responses.",
          "default": 8000
        },
        "idSiberCoder.claude.baseUrl": {
          "type": "string",
          "description": "Claude API base URL.",
          "default": "https://api.anthropic.com"
        },
        "idSiberCoder.claude.model": {
          "type": "string",
          "description": "Claude model identifier.",
          "default": "claude-3-7-sonnet-latest"
        },
        "idSiberCoder.claude.maxTokens": {
          "type": "number",
          "description": "Maximum tokens for Claude responses.",
          "default": 8000
        },
        "idSiberCoder.novita.baseUrl": {
          "type": "string",
          "description": "Novita AI API base URL.",
          "default": "https://api.novita.ai/openai"
        },
        "idSiberCoder.novita.model": {
          "type": "string",
          "description": "Novita AI model identifier.",
          "default": "deepseek/deepseek-v3.1-terminus"
        },
        "idSiberCoder.novita.maxTokens": {
          "type": "number",
          "description": "Maximum tokens for Novita AI responses.",
          "default": 8000
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run esbuild-base -- --minify",
    "compile": "tsc -p ./",
    "esbuild-base": "node esbuild.js",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "watch": "tsc -w -p ./",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTests.js",
    "package": "vsce package",
    "publish": "vsce publish"
  },
  "devDependencies": {
    "@types/node": "^20.11.30",
    "@types/vscode": "^1.85.0",
    "@types/markdown-it": "^13.0.6",
    "typescript": "^5.4.5",
    "tslib": "^2.6.2",
    "@vscode/test-electron": "^2.3.6",
    "esbuild": "^0.20.2"
  },
  "dependencies": {
    "axios": "^1.6.8",
    "markdown-it": "^13.0.1"
  }
}